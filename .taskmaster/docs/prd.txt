# 整木定制产品库管理系统 - 产品需求文档 (PRD)

## 项目概述

整木定制产品库管理系统是一个基于 Django 的企业级产品数据管理平台，专为整木定制行业设计。系统通过标准化的 SPU（SPU产品单元）和 SKU（品牌产品）管理模式，解决了行业内产品信息分散、品牌产品难以统一管理的核心痛点。

**解决的问题：**
- 不同品牌的相似产品缺乏统一的标准化管理
- 产品属性配置复杂，难以系统化管理
- 销售人员查找产品效率低下
- 产品信息更新维护困难

**目标用户：**
- 产品专员：负责产品信息录入、维护和管理
- 销售设计师：查询产品信息，进行方案设计
- 系统管理员：用户权限管理和系统维护

## 核心功能特性

### 1. 分层产品管理体系
- **分类管理**：支持无限级分类结构（整木家居 → 柜类 → 橱柜）
- **SPU 标准化**：定义SPU产品单元，统一产品规格和属性
- **SKU 品牌化**：基于 SPU 创建具体的品牌产品
- **属性配置**：灵活的属性-属性值管理系统

### 2. 智能化后台管理
- **动态配置界面**：选择 SPU 后自动加载可配置属性
- **层级展示**：树状结构清晰展示分类关系
- **批量操作**：支持批量编辑和导入导出
- **权限控制**：基于角色的精细化权限管理

### 3. REST API 接口
- **标准化接口**：符合 RESTful 规范的 API 设计
- **灵活筛选**：支持多维度产品筛选和搜索
- **数据聚合**：提供筛选器构建所需的聚合数据
- **响应优化**：嵌套序列化提供完整产品信息

### 4. 用户体验优化
- **直观界面**：基于 Django Admin 深度定制的管理界面
- **快速搜索**：支持产品名称、编码、品牌等多字段搜索
- **数据可视化**：清晰的产品配置和关系展示
- **操作友好**：简化的产品创建和编辑流程

## 技术架构

### 后端技术栈
- **框架**：Django 5.x + Django REST Framework 3.15+
- **数据库**：PostgreSQL 16+ (主推) 或 MySQL 8.0+
- **缓存**：Redis (查询结果缓存)
- **应用服务器**：Gunicorn
- **Web服务器**：Nginx
- **开发环境**：Docker + Docker Compose
- **容器化**：多容器架构（Django App、PostgreSQL、Redis、Nginx）

### 数据模型设计
```
Category (分类)
├── 支持无限级分类
├── 排序功能
└── 层级展示

Brand (品牌)
├── 品牌基本信息
├── Logo 管理
└── 联系人信息

Attribute (属性) + AttributeValue (属性值)
├── 属性定义和编码
├── 属性值标准化
└── 排序和分组

SPU (SPU产品单元)
├── 标准产品定义
├── 可配置属性关联
└── 分类归属

SKU (品牌产品)
├── 基于 SPU 的具体产品
├── 品牌关联
├── 价格和营销信息
└── 属性配置详情
```

### API 接口设计
- **产品查询接口**：`/api/products/skus/`
- **产品详情接口**：`/api/products/skus/<id>/`
- **筛选器接口**：`/api/products/filters/`
- **分类接口**：`/api/products/categories/`
- **品牌接口**：`/api/products/brands/`

## 开发路线图

### 第一阶段：基础架构搭建
**目标**：建立项目基础结构和核心数据模型

**功能范围**：
- Docker 开发环境搭建（Docker Compose 配置）
- Django 项目初始化和配置
- 数据库模型定义（Category, Brand, Attribute, AttributeValue, SPU, SKU）
- 基础的 Django Admin 配置
- 数据库迁移和测试数据导入
- 基本的模型验证和约束
- 容器化部署配置

**交付成果**：
- 完整的 Docker 开发环境
- 完整的数据模型和数据库结构
- 可运行的 Django 项目
- 基础的 Admin 后台界面

### 第二阶段：核心管理功能
**目标**：实现产品管理的核心业务逻辑

**功能范围**：
- Category Admin 的树状结构展示
- Brand 和 Attribute 的完整管理界面
- SPU Admin 的属性关联管理
- SKU Admin 的动态配置功能（核心难点）
- 用户权限和角色管理
- 数据验证和完整性检查

**交付成果**：
- 完整的产品管理后台
- 用户权限系统
- 数据完整性保障

### 第三阶段：API 开发
**目标**：为前端和第三方系统提供数据接口

**功能范围**：
- DRF Serializers 开发
- ViewSets 和 URL 配置
- 产品筛选和搜索功能
- API 文档生成
- 接口测试和优化

**交付成果**：
- 完整的 REST API 接口
- API 文档
- 接口测试用例

### 第四阶段：性能优化和部署
**目标**：系统优化和生产环境部署

**功能范围**：
- 数据库查询优化
- Redis 缓存集成
- 静态文件处理
- 生产环境配置
- 部署脚本和监控

**交付成果**：
- 性能优化的系统
- 完整的部署方案
- 监控和维护工具

## 逻辑依赖链

### 基础设施层（必须首先完成）
1. **Docker 环境**：Docker 和 Docker Compose 配置
2. **项目初始化**：Django 项目创建和基础配置
3. **数据模型**：核心模型定义和数据库迁移
4. **基础 Admin**：基本的后台管理界面

### 核心功能层（基于基础设施）
1. **分类管理**：Category 的树状结构管理
2. **基础数据**：Brand 和 Attribute 管理
3. **SPU 管理**：SPU产品单元和属性关联
4. **SKU 管理**：品牌产品和动态配置（依赖前面所有功能）

### 扩展功能层（基于核心功能）
1. **权限系统**：用户角色和权限管理
2. **API 接口**：REST API 开发
3. **性能优化**：缓存和查询优化

### 部署和维护层（最后完成）
1. **生产配置**：环境变量和部署配置
2. **监控运维**：日志、监控和备份

## 风险识别与应对

### 技术风险
**风险1：SKU 动态配置的复杂性**
- **描述**：SKU 创建时需要根据选择的 SPU 动态加载属性配置界面
- **应对**：采用 Django Admin 的 JavaScript 扩展，通过 AJAX 实现动态加载
- **备选方案**：使用第三方 Admin 扩展包如 django-admin-interface

**风险2：数据库性能问题**
- **描述**：复杂的多表关联查询可能影响性能
- **应对**：使用 select_related 和 prefetch_related 优化查询
- **备选方案**：引入 Redis 缓存热点数据

**风险3：权限管理复杂性**
- **描述**：不同角色的权限控制可能过于复杂
- **应对**：使用 Django 内置的权限系统，保持简单明确
- **备选方案**：采用基于角色的访问控制（RBAC）

### 业务风险
**风险1：产品数据模型不够灵活**
- **描述**：随着业务发展，现有模型可能无法满足新需求
- **应对**：设计时预留扩展字段，采用灵活的属性配置系统
- **备选方案**：使用 JSON 字段存储扩展属性

**风险2：用户接受度问题**
- **描述**：用户可能不适应新的产品管理方式
- **应对**：提供详细的用户培训和操作手册
- **备选方案**：分阶段推广，先在小范围试用

### 资源风险
**风险1：开发时间不足**
- **描述**：功能复杂度可能超出预期开发时间
- **应对**：采用 MVP 方式，优先开发核心功能
- **备选方案**：简化部分非核心功能

**风险2：技术人员不足**
- **描述**：Django 和 DRF 的专业技能要求
- **应对**：提前进行技术培训，建立知识文档
- **备选方案**：寻求外部技术支持

## 附录

### 技术规范
- **代码规范**：遵循 PEP 8 Python 编码规范
- **命名规范**：模型使用英文，字段使用中文 verbose_name
- **文档规范**：所有 API 接口提供详细文档
- **测试规范**：核心功能必须有单元测试覆盖

### 数据库设计原则
- **规范化**：遵循第三范式，避免数据冗余
- **完整性**：使用外键约束保证数据完整性
- **性能**：在关键查询字段上建立索引
- **扩展性**：预留扩展字段，支持未来需求

### 部署环境要求
- **服务器**：Linux 系统，推荐 Ubuntu 20.04+
- **Python**：Python 3.12+
- **数据库**：PostgreSQL 16+ 或 MySQL 8.0+
- **内存**：最低 4GB，推荐 8GB+
- **存储**：SSD 硬盘，最低 50GB
- **容器化**：Docker 24.0+ 和 Docker Compose 2.0+

### Docker 架构设计
- **应用容器**：Django 应用和 Gunicorn
- **数据库容器**：PostgreSQL 16
- **缓存容器**：Redis 7
- **代理容器**：Nginx (生产环境)
- **开发工具**：包含调试和开发依赖的开发镜像
- **数据持久化**：使用 Docker volumes 管理数据

### 安全考虑
- **认证授权**：使用 Django 内置的认证系统
- **数据加密**：敏感数据传输使用 HTTPS
- **SQL 注入防护**：使用 Django ORM 防止 SQL 注入
- **XSS 防护**：使用 Django 的模板系统防止 XSS
- **CSRF 防护**：启用 Django 的 CSRF 保护 