---
alwaysApply: true
---

除非必要，不然不允许使用 playwright mcp

# 调试优先级规则

## **代码优先原则**
- **始终优先查看代码**，而不是直接查看网页或浏览器结果
- 通过代码分析理解问题的根本原因
- 避免仅凭表面现象做出判断

## **文档查询原则**
- **当一个问题比较难以解决时，第一时间去查询相关文档**
- 查阅官方文档、API文档或设计规范
- 确保解决方案符合最佳实践

## **数据库操作优先原则**
- **操作数据库前，查看一下数据库结构@public.sql**，确保了解当前的表结构、字段类型、约束条件等信息
- 理解数据关系和约束条件
- 避免因数据结构不熟悉导致的错误

## **修改问题优先级规则**
- **始终优先修改代码**，优先找出问题的真正原因，而不是直接进行新增和打补丁行为
- 追根溯源，解决根本问题
- 避免临时性的修补方案
- 确保修改具有可持续性和维护性

## **设计规范遵循原则**
- **参考现有的结构和板式增加功能模块**
- **参照Django admin的设计规范来增加功能**
- 保持代码一致性和可维护性
- 遵循框架的最佳实践

## **模块化开发原则**
- **遵循 [django_modular_development.mdc](mdc:.cursor/rules/django_modular_development.mdc) 规范**
- **单个文件不超过500行**，超过时考虑拆分模块
- **优先使用混入类和基础类**实现代码复用
- **保持模块职责单一**，避免功能混合
- **查看项目特定规范 [flow_project_standards.mdc](mdc:.cursor/rules/flow_project_standards.mdc)**

## **重构优先原则**
- **始终优先修改代码**，优先找出问题的真正原因，而不是直接进行新增和打补丁行为
- **发现大文件时主动建议重构**，提高代码可维护性
- **追根溯源，解决根本问题**
- **避免临时性的修补方案**
- **确保修改具有可持续性和维护性**
