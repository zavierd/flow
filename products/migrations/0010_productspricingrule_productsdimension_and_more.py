# Generated by Django 5.0.6 on 2025-07-17 11:52

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0009_alter_sku_options_alter_spu_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductsPricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_type', models.CharField(choices=[('height', '高度超标'), ('width', '宽度超标'), ('depth', '厚度超标'), ('area', '面积超标'), ('volume', '体积超标'), ('custom', '自定义规则')], db_comment='加价规则的类型，如高度超标、宽度超标等', help_text='选择加价规则的类型', max_length=20, verbose_name='规则类型')),
                ('name', models.CharField(db_comment='加价规则的描述性名称', help_text='规则的描述性名称，如：高度超2420mm加价规则', max_length=100, verbose_name='规则名称')),
                ('threshold_value', models.DecimalField(db_comment='触发加价的阈值，单位根据规则类型而定', decimal_places=2, help_text='超过此值将触发加价，单位：mm/㎡/m³等', max_digits=10, verbose_name='阈值')),
                ('unit_increment', models.DecimalField(db_comment='加价计算的单位增量，如每10mm', decimal_places=2, default=10.0, help_text='加价计算的单位增量，如每10mm加价一次', max_digits=10, verbose_name='计算单位')),
                ('calculation_method', models.CharField(choices=[('fixed', '固定加价'), ('percentage', '百分比加价'), ('multiplier', '倍数加价'), ('step', '阶梯加价')], db_comment='加价的计算方法：固定金额、百分比、倍数等', default='fixed', help_text='选择加价的计算方法', max_length=20, verbose_name='计算方法')),
                ('price_increment', models.DecimalField(db_comment='每单位增量的加价金额', decimal_places=2, help_text='每单位增量的加价金额，单位：元', max_digits=10, verbose_name='加价金额')),
                ('multiplier', models.DecimalField(db_comment='倍数加价时使用的系数', decimal_places=2, default=1.0, help_text='倍数加价时使用的系数，如1.3表示原价的1.3倍', max_digits=5, verbose_name='倍数系数')),
                ('max_increment', models.DecimalField(blank=True, db_comment='单项规则的最大加价限制', decimal_places=2, help_text='单项规则的最大加价限制，防止过度加价', max_digits=10, null=True, verbose_name='最大加价')),
                ('is_active', models.BooleanField(db_comment='规则是否启用', default=True, help_text='是否启用此加价规则', verbose_name='是否启用')),
                ('effective_date', models.DateField(blank=True, db_comment='规则的生效日期', help_text='规则的生效日期，为空表示立即生效', null=True, verbose_name='生效日期')),
                ('expiry_date', models.DateField(blank=True, db_comment='规则的失效日期', help_text='规则的失效日期，为空表示永久有效', null=True, verbose_name='失效日期')),
                ('description', models.TextField(blank=True, db_comment='加价规则的详细描述和说明', default='', help_text='规则的详细描述，包括适用条件、计算方法等', verbose_name='规则描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='规则创建的时间戳', verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='规则最后更新的时间戳', verbose_name='更新时间')),
                ('created_by', models.ForeignKey(blank=True, db_comment='创建此规则的用户ID', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_pricing_rules', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('spu', models.ForeignKey(db_comment='关联的SPU产品单元', help_text='此加价规则适用的SPU产品', on_delete=django.db.models.deletion.CASCADE, related_name='pricing_rules', to='products.spu', verbose_name='SPU')),
            ],
            options={
                'verbose_name': '产品加价规则',
                'verbose_name_plural': '产品加价规则',
                'db_table_comment': '产品加价规则表 - 存储超高、超宽、超厚等加价规则',
                'ordering': ['spu', 'rule_type', 'threshold_value'],
            },
        ),
        migrations.CreateModel(
            name='ProductsDimension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dimension_type', models.CharField(choices=[('height', '高度'), ('width', '宽度'), ('depth', '厚度/深度'), ('length', '长度'), ('diameter', '直径'), ('radius', '半径'), ('area', '面积'), ('volume', '体积'), ('weight', '重量'), ('custom', '自定义')], db_comment='尺寸的类型，如高度、宽度、厚度等', help_text='选择尺寸的类型', max_length=20, verbose_name='尺寸类型')),
                ('standard_value', models.DecimalField(db_comment='产品的标准尺寸值', decimal_places=2, help_text='产品的标准尺寸值，用于计算加价', max_digits=10, verbose_name='标准值')),
                ('min_value', models.DecimalField(blank=True, db_comment='允许的最小尺寸值', decimal_places=2, help_text='允许的最小尺寸值，为空表示无限制', max_digits=10, null=True, verbose_name='最小值')),
                ('max_value', models.DecimalField(blank=True, db_comment='允许的最大尺寸值', decimal_places=2, help_text='允许的最大尺寸值，为空表示无限制', max_digits=10, null=True, verbose_name='最大值')),
                ('unit', models.CharField(choices=[('mm', '毫米'), ('cm', '厘米'), ('m', '米'), ('㎡', '平方米'), ('m³', '立方米'), ('kg', '千克'), ('g', '克'), ('custom', '自定义单位')], db_comment='尺寸的计量单位', default='mm', help_text='尺寸的计量单位', max_length=10, verbose_name='单位')),
                ('custom_unit', models.CharField(blank=True, db_comment='自定义的计量单位', default='', help_text='当单位选择为自定义时，填写具体的单位名称', max_length=20, verbose_name='自定义单位')),
                ('tolerance', models.DecimalField(db_comment='尺寸的允许公差范围', decimal_places=2, default=0.0, help_text='尺寸的允许公差范围，±值', max_digits=10, verbose_name='公差')),
                ('is_key_dimension', models.BooleanField(db_comment='是否为影响定价的关键尺寸', default=False, help_text='是否为影响定价的关键尺寸', verbose_name='是否关键尺寸')),
                ('description', models.TextField(blank=True, db_comment='尺寸的详细描述和说明', default='', help_text='尺寸的详细描述，包括测量方法、特殊说明等', verbose_name='尺寸描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='记录创建的时间戳', verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='记录最后更新的时间戳', verbose_name='更新时间')),
                ('created_by', models.ForeignKey(blank=True, db_comment='创建此记录的用户ID', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_dimensions', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('sku', models.ForeignKey(db_comment='关联的SKU产品', help_text='此尺寸信息所属的SKU产品', on_delete=django.db.models.deletion.CASCADE, related_name='dimensions', to='products.sku', verbose_name='SKU')),
            ],
            options={
                'verbose_name': '产品尺寸',
                'verbose_name_plural': '产品尺寸',
                'db_table_comment': '产品尺寸表 - 存储每个SKU的标准尺寸信息',
                'ordering': ['sku', 'dimension_type'],
                'indexes': [models.Index(fields=['sku'], name='idx_dimension_sku'), models.Index(fields=['dimension_type'], name='idx_dimension_type'), models.Index(fields=['is_key_dimension'], name='idx_dimension_key'), models.Index(fields=['standard_value'], name='idx_dimension_standard')],
            },
        ),
        migrations.AddConstraint(
            model_name='productsdimension',
            constraint=models.UniqueConstraint(fields=('sku', 'dimension_type'), name='unique_dimension_per_sku_type'),
        ),
        migrations.AddIndex(
            model_name='productspricingrule',
            index=models.Index(fields=['spu'], name='idx_pricing_rule_spu'),
        ),
        migrations.AddIndex(
            model_name='productspricingrule',
            index=models.Index(fields=['rule_type'], name='idx_pricing_rule_type'),
        ),
        migrations.AddIndex(
            model_name='productspricingrule',
            index=models.Index(fields=['is_active'], name='idx_pricing_rule_active'),
        ),
        migrations.AddIndex(
            model_name='productspricingrule',
            index=models.Index(fields=['effective_date'], name='idx_pricing_rule_effective'),
        ),
        migrations.AddIndex(
            model_name='productspricingrule',
            index=models.Index(fields=['expiry_date'], name='idx_pricing_rule_expiry'),
        ),
        migrations.AddConstraint(
            model_name='productspricingrule',
            constraint=models.UniqueConstraint(fields=('spu', 'rule_type', 'threshold_value'), name='unique_pricing_rule_per_spu_type_threshold'),
        ),
    ]
