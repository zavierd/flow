# Generated by Django 5.0.6 on 2025-07-14 12:09

import django.core.validators
import django.db.models.deletion
import mptt.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0004_add_sku_attribute_value_model'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='category',
            options={'ordering': ['tree_id', 'lft'], 'verbose_name': '产品分类', 'verbose_name_plural': '产品分类'},
        ),
        migrations.AlterModelTableComment(
            name='attribute',
            table_comment='产品属性定义表 - 定义产品的各种可配置属性类型',
        ),
        migrations.AlterModelTableComment(
            name='attributevalue',
            table_comment='属性值表 - 存储每个属性的具体可选值',
        ),
        migrations.AlterModelTableComment(
            name='brand',
            table_comment='品牌信息表 - 管理产品品牌的基础信息和联系方式',
        ),
        migrations.AlterModelTableComment(
            name='category',
            table_comment='产品分类表 - 管理产品的多级分类体系，支持无限级嵌套',
        ),
        migrations.AlterModelTableComment(
            name='productimage',
            table_comment='产品图片表 - 存储每个SKU的多张产品展示图片',
        ),
        migrations.AlterModelTableComment(
            name='sku',
            table_comment='品牌产品表 - 具体的可销售产品，包含价格库存等销售信息',
        ),
        migrations.AlterModelTableComment(
            name='skuattributevalue',
            table_comment='SKU属性值关联表 - 关系型存储每个SKU的具体属性值配置',
        ),
        migrations.AlterModelTableComment(
            name='spu',
            table_comment='SPU产品单元表 - 定义产品的标准规格和属性配置模板',
        ),
        migrations.AlterModelTableComment(
            name='spuattribute',
            table_comment='SPU属性关联表 - 定义每个SPU支持的属性配置',
        ),
        migrations.RemoveIndex(
            model_name='skuattributevalue',
            name='products_sk_sku_id_3115e0_idx',
        ),
        migrations.RemoveIndex(
            model_name='skuattributevalue',
            name='products_sk_attribu_cccada_idx',
        ),
        migrations.AddField(
            model_name='spu',
            name='brand',
            field=models.ForeignKey(blank=True, db_comment='所属的品牌ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spus', to='products.brand', verbose_name='品牌'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='code',
            field=models.CharField(db_comment='属性的唯一标识码，用于系统内部识别', help_text='英文编码，必须唯一，如：COLOR、SIZE、MATERIAL等', max_length=50, unique=True, verbose_name='属性编码'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='属性创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='description',
            field=models.TextField(blank=True, db_comment='属性的详细描述信息', default='', help_text='属性的详细说明', verbose_name='描述'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='is_active',
            field=models.BooleanField(db_comment='属性状态，false表示已禁用', default=True, help_text='禁用后该属性将不在产品配置中显示', verbose_name='是否启用'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='is_filterable',
            field=models.BooleanField(db_comment='是否可以作为筛选条件在前台使用', default=True, help_text='勾选后可在产品列表页面作为筛选条件', verbose_name='是否可筛选'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='is_required',
            field=models.BooleanField(db_comment='创建产品时是否必须填写此属性', default=False, help_text='勾选后创建产品时必须设置此属性', verbose_name='是否必填'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='name',
            field=models.CharField(db_comment='属性的显示名称', help_text='属性的显示名称，如：颜色、尺寸、材质等', max_length=100, verbose_name='属性名称'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='order',
            field=models.IntegerField(db_comment='属性的显示顺序，数字越小越靠前', default=0, help_text='属性的显示顺序，数字越小越靠前', verbose_name='排序'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='type',
            field=models.CharField(choices=[('text', '文本'), ('number', '数字'), ('select', '单选'), ('multiselect', '多选'), ('boolean', '布尔值'), ('date', '日期'), ('color', '颜色'), ('image', '图片')], db_comment='属性的数据类型，决定了值的存储和显示方式', default='text', help_text='选择合适的属性类型', max_length=20, verbose_name='属性类型'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='unit',
            field=models.CharField(blank=True, db_comment='属性值的计量单位，如cm、kg等', default='', help_text='属性值的单位，如：cm、kg、㎡等', max_length=20, verbose_name='单位'),
        ),
        migrations.AlterField(
            model_name='attribute',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='属性最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='attribute',
            field=models.ForeignKey(db_comment='所属的属性ID', on_delete=django.db.models.deletion.CASCADE, related_name='values', to='products.attribute', verbose_name='属性'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='color_code',
            field=models.CharField(blank=True, db_comment='颜色属性的十六进制颜色代码，如#FF0000', default='', help_text='颜色属性专用，格式如：#FF0000', max_length=7, verbose_name='颜色代码'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='属性值创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='display_name',
            field=models.CharField(blank=True, db_comment='属性值的显示名称，为空时使用value字段', default='', help_text='前台显示的名称，留空则使用属性值', max_length=200, verbose_name='显示名称'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='image',
            field=models.ImageField(blank=True, db_comment='属性值的展示图片文件路径', help_text='属性值的展示图片', null=True, upload_to='attributes/images/', verbose_name='图片'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='is_active',
            field=models.BooleanField(db_comment='属性值状态，false表示已禁用', default=True, help_text='禁用后该属性值不可选择', verbose_name='是否启用'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='order',
            field=models.IntegerField(db_comment='同属性下值的显示顺序，数字越小越靠前', default=0, help_text='在同一属性下的显示顺序', verbose_name='排序'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='属性值最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='attributevalue',
            name='value',
            field=models.CharField(db_comment='属性的具体值，如红色、30cm等', help_text='属性的具体值', max_length=200, verbose_name='属性值'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='code',
            field=models.CharField(db_comment='品牌的唯一标识码，用于系统内部识别', help_text='英文编码，必须唯一，如：ROYANA、OPPEIN等', max_length=50, unique=True, verbose_name='品牌编码'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='contact_email',
            field=models.EmailField(blank=True, db_comment='品牌联系邮箱地址', default='', help_text='联系邮箱地址', max_length=254, verbose_name='联系邮箱'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='contact_person',
            field=models.CharField(blank=True, db_comment='品牌联系人姓名', default='', help_text='品牌方联系人姓名', max_length=50, verbose_name='联系人'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='contact_phone',
            field=models.CharField(blank=True, db_comment='品牌联系电话号码', default='', help_text='联系电话，如：400-888-8888', max_length=20, verbose_name='联系电话'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='品牌创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='description',
            field=models.TextField(blank=True, db_comment='品牌的详细介绍和特色描述', default='', help_text='品牌的详细介绍，包括历史、特色、理念等', verbose_name='品牌描述'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='is_active',
            field=models.BooleanField(db_comment='品牌状态，false表示已禁用', default=True, help_text='禁用后该品牌的产品将不在前台显示', verbose_name='是否启用'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='logo',
            field=models.ImageField(blank=True, db_comment='品牌标志图片文件路径', help_text='建议上传PNG格式，尺寸200x200像素', null=True, upload_to='brands/logos/', verbose_name='品牌Logo'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='name',
            field=models.CharField(db_comment='品牌的正式名称', help_text='品牌的正式名称，如：Royana、欧派等', max_length=100, verbose_name='品牌名称'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='品牌最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='brand',
            name='website',
            field=models.URLField(blank=True, db_comment='品牌官方网站地址', default='', help_text='品牌官方网站URL，如：https://www.royana.com', verbose_name='官方网站'),
        ),
        migrations.AlterField(
            model_name='category',
            name='code',
            field=models.CharField(db_comment='分类的唯一标识码，用于系统内部识别和API调用', help_text='英文编码，必须唯一，如：cabinet、base_cabinet等', max_length=50, unique=True, verbose_name='分类编码'),
        ),
        migrations.AlterField(
            model_name='category',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='分类创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='category',
            name='description',
            field=models.TextField(blank=True, db_comment='分类的详细描述信息', default='', help_text='分类的详细描述，可选填写', verbose_name='描述'),
        ),
        migrations.AlterField(
            model_name='category',
            name='is_active',
            field=models.BooleanField(db_comment='分类状态，false表示已禁用', default=True, help_text='禁用后该分类及其子分类将不在前台显示', verbose_name='是否启用'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(db_comment='分类的显示名称，如：橱柜、地柜、吊柜等', help_text='分类的显示名称，建议简洁明确', max_length=100, verbose_name='分类名称'),
        ),
        migrations.AlterField(
            model_name='category',
            name='order',
            field=models.IntegerField(db_comment='同级分类的显示顺序，数字越小越靠前', default=0, help_text='同级分类的显示顺序，数字越小越靠前', verbose_name='排序'),
        ),
        migrations.AlterField(
            model_name='category',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, db_comment='上级分类，为空表示顶级分类', help_text='选择上级分类，留空表示顶级分类', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category', verbose_name='父分类'),
        ),
        migrations.AlterField(
            model_name='category',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='分类最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='alt_text',
            field=models.CharField(blank=True, db_comment='图片的替代文本，用于SEO和无障碍访问', default='', help_text='图片的替代文本描述', max_length=200, verbose_name='图片描述'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='图片上传的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='image',
            field=models.ImageField(db_comment='产品图片文件路径', help_text='产品图片文件', upload_to='products/images/', verbose_name='图片'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='is_active',
            field=models.BooleanField(db_comment='图片状态，false表示已禁用', default=True, help_text='禁用后该图片不会在前台显示', verbose_name='是否启用'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='order',
            field=models.IntegerField(db_comment='图片的显示顺序，数字越小越靠前', default=0, help_text='图片的显示顺序', verbose_name='排序'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='sku',
            field=models.ForeignKey(db_comment='关联的SKU ID', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.sku', verbose_name='产品'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='attribute_values',
            field=models.JSONField(blank=True, db_comment='SKU的属性值配置，JSON格式存储', default=dict, help_text='产品的属性配置信息', verbose_name='属性配置'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='brand',
            field=models.ForeignKey(db_comment='所属的品牌ID', on_delete=django.db.models.deletion.CASCADE, related_name='skus', to='products.brand', verbose_name='品牌'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='code',
            field=models.CharField(db_comment='SKU的唯一标识码，通常包含属性编码', help_text='产品编码，必须唯一，如：N-US30-10-7256-L', max_length=50, unique=True, verbose_name='产品编码'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='configuration',
            field=models.JSONField(blank=True, db_comment='管理界面的动态配置信息，JSON格式', default=dict, help_text='系统动态配置信息', verbose_name='动态配置'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='cost_price',
            field=models.DecimalField(blank=True, db_comment='产品成本价，单位：元', decimal_places=2, help_text='产品的成本价格（内部使用）', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='成本价'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='SKU创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='created_by',
            field=models.ForeignKey(blank=True, db_comment='创建此SKU的用户ID', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='创建人'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='description',
            field=models.TextField(blank=True, db_comment='SKU的详细描述信息', default='', help_text='产品的详细描述', verbose_name='产品描述'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='is_featured',
            field=models.BooleanField(db_comment='是否为推荐产品，用于首页等位置展示', default=False, help_text='勾选后将在推荐位置展示', verbose_name='是否推荐'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='launch_date',
            field=models.DateField(blank=True, db_comment='产品的上市日期', help_text='产品的预计或实际上市日期', null=True, verbose_name='上市日期'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='main_image',
            field=models.ImageField(blank=True, db_comment='产品主图文件路径', help_text='产品的主要展示图片', null=True, upload_to='products/images/', verbose_name='主图'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='market_price',
            field=models.DecimalField(blank=True, db_comment='产品市场指导价，单位：元', decimal_places=2, help_text='产品的市场指导价格', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='市场价'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='min_stock',
            field=models.IntegerField(db_comment='库存预警阈值，低于此值将触发预警', default=10, help_text='库存预警线，低于此值将提醒补货', validators=[django.core.validators.MinValueValidator(0)], verbose_name='最小库存'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='name',
            field=models.CharField(db_comment='SKU的完整名称，包含属性信息', help_text='产品名称，建议包含关键属性信息', max_length=200, verbose_name='产品名称'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='price',
            field=models.DecimalField(db_comment='产品售价，单位：元', decimal_places=2, default=0.0, help_text='产品的销售价格', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='价格'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='selling_points',
            field=models.TextField(blank=True, db_comment='产品的主要卖点和特色介绍', default='', help_text='产品的主要卖点，用于营销推广', verbose_name='卖点'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='sku_id',
            field=models.UUIDField(db_comment='系统生成的UUID，用于内部唯一标识', default=uuid.uuid4, editable=False, unique=True, verbose_name='SKU ID'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='spu',
            field=models.ForeignKey(db_comment='基于的SPU模板ID', on_delete=django.db.models.deletion.CASCADE, related_name='skus', to='products.spu', verbose_name='SPU产品单元'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='status',
            field=models.CharField(choices=[('draft', '草稿'), ('active', '上架'), ('inactive', '下架'), ('discontinued', '停产')], db_comment='产品状态：草稿、上架、下架、停产', default='draft', help_text='产品的当前状态', max_length=20, verbose_name='状态'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='stock_quantity',
            field=models.IntegerField(db_comment='当前库存数量', default=0, help_text='产品的当前库存数量', validators=[django.core.validators.MinValueValidator(0)], verbose_name='库存数量'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='tags',
            field=models.CharField(blank=True, db_comment='产品标签，用逗号分隔', default='', help_text='产品标签，多个标签用逗号分隔', max_length=500, verbose_name='标签'),
        ),
        migrations.AlterField(
            model_name='sku',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='SKU最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='skuattributevalue',
            name='attribute',
            field=models.ForeignKey(db_comment='关联的属性ID', on_delete=django.db.models.deletion.CASCADE, related_name='sku_attribute_values', to='products.attribute', verbose_name='属性'),
        ),
        migrations.AlterField(
            model_name='skuattributevalue',
            name='attribute_value',
            field=models.ForeignKey(blank=True, db_comment='关联的预定义属性值ID，与custom_value二选一', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sku_attribute_values', to='products.attributevalue', verbose_name='属性值'),
        ),
        migrations.AlterField(
            model_name='skuattributevalue',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='记录创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='skuattributevalue',
            name='custom_value',
            field=models.CharField(blank=True, db_comment='自定义属性值，用于非预定义值的属性', default='', help_text='当属性值不在预定义范围内时使用', max_length=500, verbose_name='自定义值'),
        ),
        migrations.AlterField(
            model_name='skuattributevalue',
            name='sku',
            field=models.ForeignKey(db_comment='关联的SKU ID', on_delete=django.db.models.deletion.CASCADE, related_name='sku_attribute_values', to='products.sku', verbose_name='SKU'),
        ),
        migrations.AlterField(
            model_name='skuattributevalue',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='记录最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='attributes',
            field=models.ManyToManyField(help_text='该SPU支持配置的属性', related_name='spus', through='products.SPUAttribute', to='products.attribute', verbose_name='可配置属性'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='category',
            field=models.ForeignKey(db_comment='所属的产品分类ID', on_delete=django.db.models.deletion.CASCADE, related_name='spus', to='products.category', verbose_name='产品分类'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='code',
            field=models.CharField(db_comment='SPU的唯一标识码', help_text='产品编码，必须唯一，如：N-US-7256', max_length=50, unique=True, verbose_name='产品编码'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_comment='SPU创建的时间戳', verbose_name='创建时间'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='created_by',
            field=models.ForeignKey(blank=True, db_comment='创建此SPU的用户ID', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='创建人'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='description',
            field=models.TextField(blank=True, db_comment='SPU的详细描述信息', default='', help_text='产品的详细描述', verbose_name='产品描述'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='is_active',
            field=models.BooleanField(db_comment='SPU状态，false表示已禁用', default=True, help_text='禁用后基于此SPU的SKU将不可创建', verbose_name='是否启用'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='name',
            field=models.CharField(db_comment='SPU的标准名称', help_text='产品的标准名称，如：NOVO系列单门单抽底柜', max_length=200, verbose_name='产品名称'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='specifications',
            field=models.TextField(blank=True, db_comment='产品的技术规格和参数说明', default='', help_text='产品的技术规格和参数', verbose_name='规格说明'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_comment='SPU最后更新的时间戳', verbose_name='更新时间'),
        ),
        migrations.AlterField(
            model_name='spu',
            name='usage_scenario',
            field=models.TextField(blank=True, db_comment='产品的适用场景和使用建议', default='', help_text='产品的适用场景说明', verbose_name='使用场景'),
        ),
        migrations.AlterField(
            model_name='spuattribute',
            name='attribute',
            field=models.ForeignKey(db_comment='关联的属性ID', on_delete=django.db.models.deletion.CASCADE, to='products.attribute', verbose_name='属性'),
        ),
        migrations.AlterField(
            model_name='spuattribute',
            name='default_value',
            field=models.CharField(blank=True, db_comment='此属性在该SPU下的默认值', default='', help_text='创建SKU时的默认属性值', max_length=200, verbose_name='默认值'),
        ),
        migrations.AlterField(
            model_name='spuattribute',
            name='is_required',
            field=models.BooleanField(db_comment='在此SPU下创建SKU时是否必须配置此属性', default=False, help_text='勾选后基于此SPU创建SKU时必须配置此属性', verbose_name='是否必填'),
        ),
        migrations.AlterField(
            model_name='spuattribute',
            name='order',
            field=models.IntegerField(db_comment='属性在该SPU下的显示顺序', default=0, help_text='在产品配置界面的显示顺序', verbose_name='排序'),
        ),
        migrations.AlterField(
            model_name='spuattribute',
            name='spu',
            field=models.ForeignKey(db_comment='关联的SPU ID', on_delete=django.db.models.deletion.CASCADE, to='products.spu', verbose_name='SPU'),
        ),
        migrations.AddIndex(
            model_name='attribute',
            index=models.Index(fields=['code'], name='idx_attribute_code'),
        ),
        migrations.AddIndex(
            model_name='attribute',
            index=models.Index(fields=['type'], name='idx_attribute_type'),
        ),
        migrations.AddIndex(
            model_name='attribute',
            index=models.Index(fields=['is_active'], name='idx_attribute_active'),
        ),
        migrations.AddIndex(
            model_name='attribute',
            index=models.Index(fields=['order'], name='idx_attribute_order'),
        ),
        migrations.AddIndex(
            model_name='attributevalue',
            index=models.Index(fields=['attribute'], name='idx_attr_value_attribute'),
        ),
        migrations.AddIndex(
            model_name='attributevalue',
            index=models.Index(fields=['is_active'], name='idx_attr_value_active'),
        ),
        migrations.AddIndex(
            model_name='attributevalue',
            index=models.Index(fields=['order'], name='idx_attr_value_order'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['code'], name='idx_brand_code'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['is_active'], name='idx_brand_active'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['name'], name='idx_brand_name'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['code'], name='idx_category_code'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active'], name='idx_category_active'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent'], name='idx_category_parent'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['sku'], name='idx_product_image_sku'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['order'], name='idx_product_image_order'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_active'], name='idx_product_image_active'),
        ),
        migrations.AddIndex(
            model_name='sku',
            index=models.Index(fields=['code'], name='idx_sku_code'),
        ),
        migrations.AddIndex(
            model_name='sku',
            index=models.Index(fields=['spu'], name='idx_sku_spu'),
        ),
        migrations.AddIndex(
            model_name='sku',
            index=models.Index(fields=['brand'], name='idx_sku_brand'),
        ),
        migrations.AddIndex(
            model_name='sku',
            index=models.Index(fields=['status'], name='idx_sku_status'),
        ),
        migrations.AddIndex(
            model_name='sku',
            index=models.Index(fields=['is_featured'], name='idx_sku_featured'),
        ),
        migrations.AddIndex(
            model_name='sku',
            index=models.Index(fields=['stock_quantity'], name='idx_sku_stock'),
        ),
        migrations.AddIndex(
            model_name='skuattributevalue',
            index=models.Index(fields=['sku'], name='idx_sku_attr_val_sku'),
        ),
        migrations.AddIndex(
            model_name='skuattributevalue',
            index=models.Index(fields=['attribute'], name='idx_sku_attr_val_attr'),
        ),
        migrations.AddIndex(
            model_name='skuattributevalue',
            index=models.Index(fields=['attribute_value'], name='idx_sku_attr_val_value'),
        ),
        migrations.AddIndex(
            model_name='spu',
            index=models.Index(fields=['code'], name='idx_spu_code'),
        ),
        migrations.AddIndex(
            model_name='spu',
            index=models.Index(fields=['category'], name='idx_spu_category'),
        ),
        migrations.AddIndex(
            model_name='spu',
            index=models.Index(fields=['brand'], name='idx_spu_brand'),
        ),
        migrations.AddIndex(
            model_name='spu',
            index=models.Index(fields=['is_active'], name='idx_spu_active'),
        ),
        migrations.AddIndex(
            model_name='spuattribute',
            index=models.Index(fields=['spu'], name='idx_spu_attr_spu'),
        ),
        migrations.AddIndex(
            model_name='spuattribute',
            index=models.Index(fields=['attribute'], name='idx_spu_attr_attribute'),
        ),
    ]
